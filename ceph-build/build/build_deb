#!/bin/bash
set -ex

# Only do actual work when we are a DEB distro
if test -f /etc/redhat-release ; then
    exit 0
fi

VENV="$WORKSPACE/venv/bin"

get_bptag() {
    dist=$1

    [ "$dist" = "sid" ] && dver=""
    [ "$dist" = "jessie" ] && dver="~bpo80+1"
    [ "$dist" = "wheezy" ] && dver="~bpo70+1"
    [ "$dist" = "squeeze" ] && dver="~bpo60+1"
    [ "$dist" = "lenny" ] && dver="~bpo50+1"
    [ "$dist" = "xenial" ] && dver="$dist"
    [ "$dist" = "trusty" ] && dver="$dist"
    [ "$dist" = "saucy" ] && dver="$dist"
    [ "$dist" = "precise" ] && dver="$dist"
    [ "$dist" = "oneiric" ] && dver="$dist"
    [ "$dist" = "natty" ] && dver="$dist"
    [ "$dist" = "maverick" ] && dver="$dist"
    [ "$dist" = "lucid" ] && dver="$dist"
    [ "$dist" = "karmic" ] && dver="$dist"

    echo $dver
}

BPTAG=`get_bptag $DIST`

# slap -rc to the ref if we are doing a release-candidate build
[ "$RC" = true ] && chacra_ref="$BRANCH-rc" || chacra_ref="$BRANCH"
[ "$TEST" = true ] && chacra_ref="test"
vers=`cat ./dist/version`
distro=`python -c "exec 'import platform; print platform.linux_distribution()[0].lower()'"`
debian_version=${vers}-1
chacra_endpoint="ceph/${chacra_ref}/${distro}/${DIST}/${ARCH}"
gen_debian_version() {
    raw=$1
    dist=$2

    [ "$dist" = "sid" ] && dver="$raw"
    [ "$dist" = "jessie" ] && dver="$raw~bpo80+1"
    [ "$dist" = "wheezy" ] && dver="$raw~bpo70+1"
    [ "$dist" = "squeeze" ] && dver="$raw~bpo60+1"
    [ "$dist" = "lenny" ] && dver="$raw~bpo50+1"
    [ "$dist" = "precise" ] && dver="$raw$dist"
    [ "$dist" = "saucy" ] && dver="$raw$dist"
    [ "$dist" = "trusty" ] && dver="$raw$dist"
    [ "$dist" = "xenial" ] && dver="$raw$dist"

    echo $dver
}

bpvers=`gen_debian_version $debian_version $DIST`

if [ "$THROWAWAY" = false ] ; then
    # this exists in scripts/build_utils.sh
    check_binary_existence $chacra_endpoint
fi

HOST=$(hostname --short)
echo "Building on $(hostname)"
echo "  DIST=${DIST}"
echo "  BPTAG=${BPTAG}"
echo "  WS=$WORKSPACE"
echo "  PWD=$(pwd)"
echo "  BUILD SOURCE=$COPYARTIFACT_BUILD_NUMBER_CEPH_SETUP"
echo "*****"
env
echo "*****"

# create a release directory for ceph-build tools
mkdir -p release
cp -a dist release/${vers}
echo $DIST > release/${vers}/debian_dists
echo "${debian_version}" > release/${vers}/debian_version

cd release/$vers


# HACK HACK HACK HACK HACK HACK HACK HACK HACK HACK HACK HACK HACK HACK HACK HACK HACK HACK HACK
# FIXME: I don't think we need this 'hack' anymore
# Dirty Hack:
baddist=$(echo $DIST | grep -ic -e squeeze -e wheezy || true)
if [ $baddist -eq 1 ]
then
    sed -i 's/ libbabeltrace-ctf-dev, libbabeltrace-dev,//g' ceph_${vers}-1.dsc || true
    sed -i 's/ liblttng-ust-dev//g' ceph_${vers}-1.dsc || true

fi
# HACK HACK HACK HACK HACK HACK HACK HACK HACK HACK HACK HACK HACK HACK HACK HACK HACK HACK HACK


# unpack sources
dpkg-source -x ceph_${vers}-1.dsc


# HACK HACK HACK HACK HACK HACK HACK HACK HACK HACK HACK HACK HACK HACK HACK HACK HACK HACK HACK
if [ $baddist -eq 1 ]
then
    rm -vf *.orig.tar.gz || true
    grep -v babeltrace ceph-${vers}/debian/control  | grep -v liblttng > ceph-${vers}/debian/control.new
    mv -v ceph-${vers}/debian/control.new ceph-${vers}/debian/control
fi
# HACK HACK HACK HACK HACK HACK HACK HACK HACK HACK HACK HACK HACK HACK HACK HACK HACK HACK HACK


(  cd ceph-${vers}
   DEB_VERSION=$(dpkg-parsechangelog | sed -rne 's,^Version: (.*),\1, p')
   BP_VERSION=${DEB_VERSION}${BPTAG}
   dch -D $DIST --force-distribution -b -v "$BP_VERSION" "$comment"
)
dpkg-source -b ceph-${vers}

echo "Building Debian"
cd "$WORKSPACE"
# Before, at this point, this script called the below contents that
# was part of /srv/ceph-buid/build_debs.sh. Now everything is in here, in one
# place, no need to checkout/clone anything. WYSIWYG::
#
#    sudo $bindir/build_debs.sh ./release /srv/debian-base $vers


releasedir="./release"
pbuilddir="/srv/debian-base"
cephver=$vers

echo version $cephver

# This used to live in a *file* on /src/ceph-build. Now it lives here because
# it doesn't make sense to have a file that lives in /srv/ that we then
# concatenate to get its contents.


# FIXME this looks exactly like `setup_pbuilder`, we probably don't need this
# or we need to refactor.
sudo pbuilder --clean

echo deb vers $bpvers


echo building debs for $DIST
if [ `dpkg-architecture -qDEB_BUILD_ARCH` = "i386" ] ; then
    #  Architecture dependent, independent and source
    sudo pbuilder build \
        --distribution $DIST \
        --basetgz $pbuilddir/$DIST.tgz \
        --buildresult $releasedir/$cephver \
        --debbuildopts "-j`grep -c processor /proc/cpuinfo`" \
        $releasedir/$cephver/ceph_$bpvers.dsc
else
    #  Binary only architecture dependent
    sudo pbuilder build \
        --binary-arch \
        --distribution $DIST \
        --basetgz $pbuilddir/$DIST.tgz \
        --buildresult $releasedir/$cephver \
        --debbuildopts "-j`grep -c processor /proc/cpuinfo`" \
        $releasedir/$cephver/ceph_$bpvers.dsc
fi

# do lintian checks
echo lintian checks for $bpvers
echo lintian --allow-root $releasedir/$cephver/*$bpvers*.deb

[ "$FORCE" = true ] && chacra_flags="--force" || chacra_flags=""

if [ "$THROWAWAY" = false ] ; then
    # push binaries to chacra
    find release/$vers/ | egrep "*\.(changes|deb|dsc|gz)$" | egrep -v "(Packages|Sources|Contents)" | $VENV/chacractl binary ${chacra_flags} create ${chacra_endpoint}
fi
